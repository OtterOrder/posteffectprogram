
float3	gCamPosition;
float	gZNear;
float	gZFar;

float4x4	gViewProjInv;

float3	gLightPosition		= float3(0.f, 0.f, 0.f);
float3	gLightDirection		= float3(0.f, 0.f, 1.f);
float3	gLightDiffuse		= float3(0.5f, 0.5f, 0.5f);
float3	gLightSpecular		= float3(1.0f, 1.0f, 1.0f);

sampler DiffuseSampler = 
sampler_state
{
    AddressU  = WRAP;
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

sampler NormalSampler = 
sampler_state
{
    AddressU  = WRAP;
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

sampler DepthSampler = 
sampler_state
{
    AddressU  = WRAP;
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

float4 PSMain (float2 _uv : TEXCOORD0)	: COLOR0
{
	float4 GBDiffuse = tex2D(DiffuseSampler, _uv);
	float3 DiffuseColor = GBDiffuse.rgb;

	float4 GBNormal = tex2D(NormalSampler, _uv);
	float3 WorldNormal = GBNormal.xyz * 2.f - 1.f;

	float Depth = tex2D(DepthSampler, _uv).x;

	float3 SpecularColor = float3 (1.f, 1.f, 1.f);
	float  SpecularGlossiness = GBDiffuse.a;
	float  SpecularPower = GBNormal.a;

	float3 ScreenPosition;
	ScreenPosition.xy = float2(_uv.x, 1.f - _uv.y)*2.f -1.f;
	ScreenPosition.z = Depth;
	float4 NHWorldPosition = mul(float4(ScreenPosition, 1.f), gViewProjInv);
	float3 WorldPosition = NHWorldPosition.xyz / NHWorldPosition.w;


	float3 LightDir = normalize(gLightPosition - WorldPosition);
	float  DiffuseIntensity = dot(LightDir, WorldNormal);

	float3 CamDir = normalize(gCamPosition - WorldPosition);
	float3 Reflect = normalize(2.f * WorldNormal - LightDir);
	float  SpecularIntensity = min(pow(saturate(dot(Reflect, CamDir)), SpecularGlossiness), SpecularPower);

	float4 FinalColor;

	FinalColor.rgb = DiffuseIntensity * gLightDiffuse * DiffuseColor /*+ SpecularIntensity * gLightSpecular * float3(1.f, 1.f, 1.f)*/;
	//FinalColor.rgb = float3(SpecularIntensity, SpecularIntensity, SpecularIntensity);
	FinalColor.a = 1.0;

	// here we add color to show how lighting pass affects the scene
	//FinalColor.rgb += i.vTex0.rgr * 0.5;

	return FinalColor;
}