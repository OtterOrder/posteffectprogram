sampler DiffuseSampler = 
sampler_state
{
    AddressU  = WRAP;        
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

sampler NormalSampler = 
sampler_state
{
    AddressU  = WRAP;        
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

sampler SpecularSampler = 
sampler_state
{
    AddressU  = WRAP;        
	AddressV  = WRAP;
    MipFilter = LINEAR;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
};

float gBumpCoef = 1.f;
float4x4 g_mWorldIT;	//WorldInverseTranspose;

struct VS_OUTPUT
{
	float2 UV		: TEXCOORD0;
	float4 WorldPos	: TEXCOORD1;
	float4 Normal	: NORMAL;
	float3 Tangent	: TEXCOORD2;
	float3 Binormal	: TEXCOORD3;
};

struct PS_OUTPUT_GBUFFER
{
	float4	vDiffuse		: COLOR0;
	float4	vNormal			: COLOR1;
	float4	vDepth 			: COLOR2;
};

PS_OUTPUT_GBUFFER PSTextureDisplay (VS_OUTPUT Input)	: COLOR0
{
	PS_OUTPUT_GBUFFER Output;
	
	float4 diffuseColor = tex2D(DiffuseSampler, Input.UV);
	float4 normalColor = tex2D(NormalSampler, Input.UV);
	float4 specularColor = tex2D(SpecularSampler, Input.UV);
	
	// RT 1 Diffuse + Spec intensity
	Output.vDiffuse=diffuseColor;
	Output.vDiffuse.a=specularColor.r;
	
	// RT 2 Normal + Spec power
	float3 Nw = normalize(mul(Input.Normal.xyz, g_mWorldIT));

	float3 bumps = gBumpCoef * (normalColor.xyz - (0.5f).xxx);
	Nw = normalize( Nw + (bumps.x * Input.Tangent + bumps.y * Input.Binormal));

	Output.vNormal.rgb = (Nw + (1.f).xxx) / (2.f).xxx;
	Output.vNormal.a=specularColor.g;
	
	// RT 3 Depth
	float Depth = Input.WorldPos.z / Input.WorldPos.w;
	Output.vDepth = Depth;
	
	return Output;
	
}

//******************************************************************************************************************************